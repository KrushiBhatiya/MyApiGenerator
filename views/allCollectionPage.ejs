<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dynamic Form</title>
    <style>
      /* General body styling */
      body,
      html {
        margin: 0;
        padding: 0;
        font-family: "Poppins", sans-serif;
        background: #1e1e2f;
        color: #fff;
        text-align: center;
      }

      /* Heading style */
      h1 {
        font-size: 3rem;
        color: #fff;
        margin-bottom: 30px;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.1);
      }

      /* Style for input fields */
      input[type="text"],
      select {
        padding: 12px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #3a3a6f;
        background-color: #2a2a3a;
        color: #fff;
        min-width: 250px;
        /* Initial minimum width */
        max-width: 100%;
        /* Allow expansion based on content */
        display: inline-block;
      }

      /* Placeholder color for input fields */
      input[type="text"]::placeholder,
      select::placeholder {
        color: #b0aeae;
        /* Darker placeholder text */
      }

      input[type="text"]:focus,
      select:focus {
        outline: none;
        border-color: #0072ff;
      }

      /* Button styles */
      button,
      #submitButton {
        background: linear-gradient(to right, #00c6ff, #0072ff);
        color: #fff;
        font-size: 16px;
        padding: 12px 30px;
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
      }

      button:hover,
      #submitButton:hover {
        background: linear-gradient(to right, #0072ff, #00c6ff);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.4);
        transform: translateY(-5px);
      }

      button:active,
      #submitButton:active {
        transform: translateY(2px);
        box-shadow: none;
      }

      /* Container for dynamic form fields */
      #formContainer {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin: 20px auto;
        width: 400px;
        align-items: center;
      }

      /* Each dynamic field row */
      .container {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      /* API Methods and token display styling */
      #apiMethodsDisplay {
        margin-top: 20px;
        font-size: 16px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        text-align: center;

        border-radius: 10px;
        width: 40%;
        max-width: 525px;
      }
      #exampleDisplay {
        margin-top: 20px;
        font-size: 16px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        text-align: center;

        border-radius: 10px;
        width: 80%;
        max-width: 525px;
      }
      #first,
      #second {
        width: 50%;
      }
      #apiMethodsDisplay ul {
        list-style-type: none;
        padding-left: 0;
      }

      #apiMethodsDisplay li {
        margin-bottom: 10px;
        word-break: break-all;
      }

      /* Example display style */
      #exampleDisplay pre {
        text-align: left;
        /* Align text to the left to show object structure */
        white-space: pre-wrap;
        /* Preserve formatting like line breaks and spaces */
        font-family: sans-serif;
        font-size: 18px;
        margin: 0;
        color: #fff;
      }

      /* Token display style */
      #tokenDisplay {
        margin-top: 20px;
        font-size: 18px;
        font-weight: bold;
        color: #00c6ff;
      }

      #apiMethodsDisplay h2,
      #exampleDisplay h2 {
        color: #fff;
        font-size: 24px;
        text-align: center;
        margin: 10px 0px;
        /* Space between title and content */
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
      }
      .display-container {
        display: flex;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 100%;
      }

      a {
        text-decoration: none;
        color: white;
      }
      @media (max-width: 650px) {
        input[type="text"],
        select {
          min-width: 200px;
        }
      }

      @media (max-width: 576px) {
        input[type="text"],
        select {
          min-width: 160px;
        }

        h1 {
          font-size: 2.5rem;
        }
      }

      @media (max-width: 480px) {
        input[type="text"],
        select {
          min-width: auto;
        }

        h1 {
          font-size: 2.2rem;
        }
      }

      @media (max-width: 440px) {
      }

      @media (max-width: 360px) {
      }

      @media (max-width: 280px) {
      }
      .st {
        width: 100%;
        outline: 5px solid #1e1e2f;
      }

      .api-method-block {
        background: linear-gradient(to right, #00c6ff, #0072ff);
        padding: 20px;
        margin: 20px 10px;
        border-radius: 10px;
        width: 100%;
        max-width: 500px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);
        text-align: left;
        /* height: 225px;
        overflow-y: scroll; */
      }

      .api-method-block h2 {
        margin-top: 0;
        font-size: 20px;
        color: #00c6ff;
        padding-bottom: 8px;
        margin-bottom: 12px;
        text-align: left !important;
      }

      .api-method-block ul {
        list-style: none;
        padding: 0;
      }

      .api-method-block li {
        margin-bottom: 10px;
        font-size: 16px;
      }
      .invisible-scrollbar {
        display: block;
        overflow: auto;
        padding: 1em;
        margin: 1em auto;
        height: 230px;
      }
      .invisible-scrollbar::-webkit-scrollbar {
        display: none;
      }

      @media screen and (max-width: 767px) {
        #apiMethodsDisplay {
          max-width: 100%;
          width: 80%;
        }
        .invisible-scrollbar {
          margin: 1em 0;
        }
      }
    </style>
  </head>

  <body>
    <h1>Your All Collection Of This Project</h1>

    <input
      type="text"
      name="projectName"
      placeholder="Enter ProjectKey"
      id="projectName"
      required
    /><button
      id="submitButton"
      onclick="submitData()"
      style="margin-left: 25px"
    >
      Submit
    </button>

    <div id="tokenDisplay"></div>
    <div class="display-container">
      <div id="apiMethodsDisplay"></div>
      <div id="exampleDisplay"></div>
    </div>
    <button type="button" onclick="clearData()">Clear Data</button>
    <button type="button" style="margin-left: 20px">
      <a href="/modelPage">Back</a>
    </button>

    <script>
      async function submitData() {
        const projectKey = document.getElementById("projectName").value.trim();
        // alert(projectKey)
        let allFieldsFilled = true;

        if (projectKey.includes(" ") || projectKey == "") {
          allFieldsFilled = false;
        }

        if (!allFieldsFilled) {
          alert("Please Provide valid data before generating Auth API.");
          return;
        }
        try {
          const projectCheck = await fetch(
            `/check-projectName?projectKey=${projectKey}`
          );
          const checkProjectName = await projectCheck.json();
          // console.log("checkProjectName ==> ",checkProjectName);

          if (!checkProjectName.exists) {
            alert("Invalid Project Key.");
            document.getElementById("projectName").value = "";
            return;
          }

          const getAllCollection = await fetch(
            `/getAllCollection?projectKey=${projectKey}`
          );
          const allCollectionData = await getAllCollection.json();
          const stData = allCollectionData.allData;
          sessionStorage.setItem("collection", JSON.stringify(stData));
          document.getElementById("projectName").value = "";
          dispalyData(stData);
        } catch (error) {
          console.log(error);
        }
      }

      function generateExample(model) {
        const example = {};
        const testId = "67cc2c0961bee872e4b5a974";
        for (const [key, type] of Object.entries(model)) {
          if (type === "String") {
            example[key] = "Sample Text"; // Example string
          } else if (type === "Email") {
            example[key] = "sample@gmail.com"; // Example string
          } else if (type === "Boolean") {
            example[key] = Math.random() > 0.5; // Random true/false
          } else if (type === "Number") {
            example[key] = Math.floor(Math.random() * 100000); // Random number
          } else if (type === "Date") {
            const randomDate = new Date();
            randomDate.setDate(
              randomDate.getDate() - Math.floor(Math.random() * 1000)
            ); // Random past date
            example[key] = randomDate.toISOString().split("T")[0]; // Format as YYYY-MM-DD
          } else if (type === "SingleFile") {
            example[key] = `${key}_${Math.random()
              .toString(36)
              .substring(7)}.png`; // Random file path
          } else if (type === "MultiFile") {
            const fileCount = Math.floor(Math.random() * 5) + 1; // 1 to 5 files
            example[key] = Array.from(
              { length: fileCount },
              (_, i) =>
                `${key}_${i + 1}_${Math.random().toString(36).substring(7)}.png`
            );
          } else if (type.startsWith("connect:")) {
            example[key] = `${testId}`;
          }
          console.log("check loop log ==> ", example);
        }
        return example;
      }

      function dispalyData(stData) {
        console.log(stData);
        let apiMethods = "";
        let example = "";
        let exampleOutput = "";
        stData.map((i, index) => {
          if (i.modelName == "signUp") {
            apiMethods += `
          <div class="api-method-block invisible-scrollbar">
              <h2>API METHODS - ${i.modelName}</h2>
              <ul>
                  <li><strong>POST :</strong> https://myapigenerator.onrender.com/auth/signUp</li>
                  <li><strong>POST :</strong> https://myapigenerator.onrender.com/auth/login</li>
                  <li><strong>GET :</strong> https://myapigenerator.onrender.com/auth/authUser</li>
              </ul>
              </div>
              
          `;
          } else {
            const apiBaseUrl = `https://myapigenerator.onrender.com/api/${i.modelName}`;
            apiMethods += `
          <div class="api-method-block invisible-scrollbar">
              <h2>API METHODS - ${i.modelName}</h2>
              <ul>
                  <li><strong>POST :</strong> ${apiBaseUrl}</li>
                  <li><strong>GET :</strong> ${apiBaseUrl}</li>
                  <li><strong>DELETE :</strong> ${apiBaseUrl}/:id</li>
                  <li><strong>PATCH :</strong> ${apiBaseUrl}/:id</li>
              </ul>
              </div>
              
          `;
          }

          
          example = generateExample(i.modelField);
          exampleOutput += `
          <div class="api-method-block invisible-scrollbar">
            <h2>OBJECT EXAMPLE - ${i.modelName}</h2>
        <pre>${JSON.stringify(example, null, 4)}</pre>
        </div>
    `;

          console.log("==>", exampleOutput);
        });
        document.getElementById("apiMethodsDisplay").innerHTML = apiMethods;
        document.getElementById("exampleDisplay").innerHTML = exampleOutput;
      }

      function clearData() {
        // Remove data from localStorage
        sessionStorage.removeItem("collection");

        document.getElementById("projectName").value = "";
        document.getElementById("apiMethodsDisplay").innerHTML = "";
        document.getElementById("exampleDisplay").innerHTML = "";
        document.getElementById("apiMethodsDisplay").style.padding = "0px";
        document.getElementById("exampleDisplay").style.padding = "0px";
      }

      window.onload = function () {
        const storedData = sessionStorage.getItem("collection");
        // console.log("check ==> ",storedData);

        if (storedData) {
          const data = JSON.parse(storedData);
          dispalyData(data);
        }
      };
    </script>
  </body>
</html>
