<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dynamic Form</title>
    <style>
      /* General body styling */
      body,
      html {
        margin: 0;
        padding: 0;
        font-family: "Poppins", sans-serif;
        background: #1e1e2f;
        color: #fff;
        text-align: center;
      }

      /* Heading style */
      h1 {
        font-size: 3rem;
        color: #fff;
        margin-bottom: 30px;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.1);
      }

      /* Style for input fields */
      input[type="text"],
      select {
        padding: 12px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #3a3a6f;
        background-color: #2a2a3a;
        color: #fff;
        min-width: 250px;
        /* Initial minimum width */
        max-width: 100%;
        /* Allow expansion based on content */
        display: inline-block;
      }

      /* Placeholder color for input fields */
      input[type="text"]::placeholder,
      select::placeholder {
        color: #b0aeae;
        /* Darker placeholder text */
      }

      input[type="text"]:focus,
      select:focus {
        outline: none;
        border-color: #0072ff;
      }

      /* Button styles */
      button,
      #submitButton {
        background: linear-gradient(to right, #00c6ff, #0072ff);
        color: #fff;
        font-size: 16px;
        padding: 12px 30px;
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
      }

      button:hover,
      #submitButton:hover {
        background: linear-gradient(to right, #0072ff, #00c6ff);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.4);
        transform: translateY(-5px);
      }

      button:active,
      #submitButton:active {
        transform: translateY(2px);
        box-shadow: none;
      }

      /* Container for dynamic form fields */
      #formContainer {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin: 20px auto;
        width: 400px;
        align-items: center;
      }

      /* Each dynamic field row */
      .container {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      /* API Methods and token display styling */
      #apiMethodsDisplay {
        margin-top: 20px;
        font-size: 16px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        text-align: center;
        background: linear-gradient(to right, #00c6ff, #0072ff);
        border-radius: 10px;
        width: 40%;
        max-width: 525px;
        box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);
      }
      #exampleDisplay {
        display: flex;
        margin-top: 20px;
        font-size: 16px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
        color: #fff;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        text-align: center;
        background: linear-gradient(to right, #00c6ff, #0072ff);
        border-radius: 10px;
        width: 50%;
        max-width: 590px;
        box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);
      }
      #first,
      #second {
        width: 50%;
      }
      #apiMethodsDisplay ul {
        list-style-type: none;
        padding-left: 0;
      }

      #apiMethodsDisplay li {
        margin-bottom: 10px;
      }

      /* Example display style */
      #exampleDisplay pre {
        text-align: left;
        /* Align text to the left to show object structure */
        white-space: pre-wrap;
        /* Preserve formatting like line breaks and spaces */
        font-family: sans-serif;
        font-size: 18px;
        margin: 0;
        color: #fff;
      }

      /* Token display style */
      #tokenDisplay {
        margin-top: 20px;
        font-size: 18px;
        font-weight: bold;
        color: #00c6ff;
      }

      #apiMethodsDisplay h2,
      #exampleDisplay h2 {
        color: #fff;
        font-size: 24px;
        text-align: center;
        margin: 10px 0px;
        /* Space between title and content */
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
      }
      .display-container {
        display: flex;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 100%;
      }

      a {
        text-decoration: none;
        color: white;
      }
      @media (max-width: 650px) {
        input[type="text"],
        select {
          min-width: 200px;
        }
      }

      @media (max-width: 576px) {
        input[type="text"],
        select {
          min-width: 160px;
        }

        h1 {
          font-size: 2.5rem;
        }
      }

      @media (max-width: 480px) {
        input[type="text"],
        select {
          min-width: auto;
        }

        h1 {
          font-size: 2.2rem;
        }
        #apiMethodsDisplay,#exampleDisplay{
          max-width: 100%;
          width: 80%;
          
        }
      }

      @media (max-width: 440px) {
      }

      @media (max-width: 360px) {
      }

      @media (max-width: 280px) {
      }
    </style>
  </head>

  <body>
    <h1>Your Authentication API</h1>

    <input
      type="text"
      name="projectName"
      placeholder="Enter ProjectKey"
      id="projectName"
      required
    /><button
      id="submitButton"
      onclick="submitData()"
      style="margin-left: 25px"
    >
      Submit
    </button>

    <div id="tokenDisplay"></div>
    <div class="display-container">
      <div id="apiMethodsDisplay"></div>
      <div id="exampleDisplay">
        <div id="first"></div>
        <div id="second"></div>
      </div>
    </div>
    <button type="button" onclick="clearData()">Clear Data</button>
    <button type="button" style="margin-left: 20px">
      <a href="/modelPage">Back</a>
    </button>

    <script>
      async function submitData() {
        const projectKey = document.getElementById("projectName").value.trim();
        // alert(projectKey)
        let allFieldsFilled = true;

        if (projectKey.includes(" ") || projectKey == "") {
          allFieldsFilled = false;
        }

        if (!allFieldsFilled) {
          alert("Please Provide valid data before generating Auth API.");
          return;
        }
        try {
          const projectCheck = await fetch(
            `/check-projectName?projectKey=${projectKey}`
          );
          const checkProjectName = await projectCheck.json();
          // console.log("checkProjectName ==> ",checkProjectName);

          if (!checkProjectName.exists) {
            alert("Invalid Project Key.");
            document.getElementById("projectName").value = "";
            return;
          }

          const response = await fetch(
            `/check-authCollection?projectKey=${projectKey}&authModelName=signUp`
          );
          const checkProjectdata = await response.json();

          if (checkProjectdata.exists) {
            alert("This Auth API already exists in the project.");
            document.getElementById("projectName").value = "";
            return;
          }

          const apiMethods = `
          <h2>API METHODS</h2>
          <ul>
              <li><strong>POST :</strong> https://generateapi.onrender.com/auth/signUp</li>
              <li><strong>POST :</strong> https://generateapi.onrender.com/auth/login</li>

          </ul>
      `;

          const ex = {
            name: "test",
            email: "test@gmail.com",
            password: "test",
          };

          const exampleOutput = `<h2>SignUp</h2>

      <pre>${JSON.stringify(ex, null, 4)}</pre>

      `;

          const ex1 = { email: "test@gmail.com", password: "test" };

          const exampleOutput1 = `<h2>Login</h2>

      <pre>${JSON.stringify(ex1, null, 4)}</pre>

      `;

          const dataSt = { apiMethods, exampleOutput, exampleOutput1 };
          
          sessionStorage.setItem("authData", JSON.stringify(dataSt));

          fetch("/authApiGenerate", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              projectKey: projectKey,
              modelName: "signUp",
              modelField: {
                name: "String",
                email: "Email",
                password: "String",
              },
            }),
          })
            .then((response) => response.json())
            .catch((err) => console.error("Error:", err));
          document.getElementById("projectName").value = "";
          displayData(dataSt);
        } catch (error) {
          console.log(error);
        }
      }

      // Function to display token and example code of API
      function displayData(data) {
        // console.log(data);
        
        document.getElementById("apiMethodsDisplay").innerHTML =
          data.apiMethods;
        document.getElementById("first").innerHTML = data.exampleOutput;
        document.getElementById("second").innerHTML = data.exampleOutput1;
        document.getElementById("apiMethodsDisplay").style.padding = "20px";
        document.getElementById("exampleDisplay").style.padding = "20px";
      }

      function clearData() {
        // Remove data from localStorage
        sessionStorage.removeItem("authData");

        // Clear the displayed data
        document.getElementById("apiMethodsDisplay").innerHTML = "";
        document.getElementById("exampleDisplay").innerHTML = "";
        document.getElementById("apiMethodsDisplay").style.padding = "0px";
        document.getElementById("exampleDisplay").style.padding = "0px";
      }

      // window load data get
      window.onload = function () {
        const storedData = sessionStorage.getItem("authData");
        if (storedData) {
          data = JSON.parse(storedData);
          displayData(data);
        }
      };

      // Function to clear data from session storage and example code
    </script>
  </body>
</html>
