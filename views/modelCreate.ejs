<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dynamic Form</title>
    <style>
      /* General body styling */
      body,
      html {
        margin: 0;
        padding: 0;
        font-family: "Poppins", sans-serif;
        background: #1e1e2f;
        color: #fff;
        text-align: center;
      }

      /* Heading style */
      h1 {
        font-size: 3rem;
        color: #fff;
        margin-bottom: 30px;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.1);
      }

      /* Style for input fields */
      input[type="text"],
      select {
        padding: 12px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #3a3a6f;
        background-color: #2a2a3a;
        color: #fff;
        min-width: 250px;
        /* Initial minimum width */
        max-width: 100%;
        /* Allow expansion based on content */
        display: inline-block;
      }

      /* Placeholder color for input fields */
      input[type="text"]::placeholder,
      select::placeholder {
        color: #b0aeae;
        /* Darker placeholder text */
      }

      input[type="text"]:focus,
      select:focus {
        outline: none;
        border-color: #0072ff;
      }

      /* Button styles */
      button,
      #submitButton {
        background: linear-gradient(to right, #00c6ff, #0072ff);
        color: #fff;
        font-size: 16px;
        padding: 12px 30px;
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
      }

      button:hover,
      #submitButton:hover {
        background: linear-gradient(to right, #0072ff, #00c6ff);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.4);
        transform: translateY(-5px);
      }

      button:active,
      #submitButton:active {
        transform: translateY(2px);
        box-shadow: none;
      }

      /* Container for dynamic form fields */
      #formContainer {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin: 20px auto;
        width: 400px;
        align-items: center;
      }

      /* Each dynamic field row */
      .container {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      /* API Methods and token display styling */
      #apiMethodsDisplay,
      #exampleDisplay {
        margin-top: 20px;
        font-size: 16px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        text-align: center;
        background: linear-gradient(to right, #00c6ff, #0072ff);
        border-radius: 10px;
        width: 80%;
        max-width: 525px;
        box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);
      }

      #apiMethodsDisplay ul {
        list-style-type: none;
        padding-left: 0;
      }

      #apiMethodsDisplay li {
        margin-bottom: 10px;
      }

      /* Example display style */
      #exampleDisplay pre {
        text-align: left;
        /* Align text to the left to show object structure */
        white-space: pre-wrap;
        /* Preserve formatting like line breaks and spaces */
        font-family: sans-serif;
        font-size: 18px;
        margin: 0;
        color: #fff;
      }

      /* Token display style */
      #tokenDisplay {
        margin-top: 20px;
        font-size: 18px;
        font-weight: bold;
        color: #00c6ff;
      }

      #apiMethodsDisplay h2,
      #exampleDisplay h2 {
        color: #fff;
        font-size: 24px;
        text-align: center;
        margin: 10px 0px;
        /* Space between title and content */
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
      }

      .display-container {
        display: flex;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 100%;
      }

      a {
        text-decoration: none;
        color: white;
      }
      @media (max-width: 650px) {
        input[type="text"],
        select {
          min-width: 200px;
        }
      }

      @media (max-width: 576px) {
        input[type="text"],
        select {
          min-width: 160px;
        }

        h1 {
          font-size: 2.5rem;
        }
      }

      @media (max-width: 480px) {
        input[type="text"],
        select {
          min-width: auto;
        }

        h1 {
          font-size: 2.2rem;
        }
      }

      @media (max-width: 440px) {
      }

      @media (max-width: 360px) {
      }

      @media (max-width: 280px) {
      }
    </style>
  </head>

  <body>
    <h1>Create Your Own Field</h1>

    <input
      type="text"
      name="projectKey"
      placeholder="Enter projectKey"
      id="projectKey"
      required
    />
    <br /><br />
    <input
      type="text"
      name="modelname"
      placeholder="Enter CollectionName"
      id="modelname"
      required
    />
    <!-- <br><br> -->
    <div id="formContainer">
      <div class="container">
        <input
          type="text"
          placeholder="Enter FieldName"
          name="textField"
          required
        />
        <select id="typeDropdown" name="dropdown" required>
          <option value="" selected disabled>SELECT TYPE</option>
          <option value="String">Text</option>
          <option value="Number">Number</option>
          <option value="Boolean">Boolean</option>
          <option value="Date">Date</option>
          <option value="SingleFile">File ( Upload Single File )</option>
          <option value="MultiFile">File ( Upload Multiple File )</option>
          <option value="connect">Connect With other Collection</option>
        </select>
        <select
          id="collectionDropdown"
          name="collection"
          style="display: none"
        ></select>
        <button type="button" onclick="removeFormField(this)">-</button>
      </div>
    </div>

    <button type="button" onclick="addFormField()">+</button> <br /><br /><br />
    <button id="submitButton" onclick="submitData()">
      Create Collection And Generate API Key
    </button>
    <br /><br />
    <button type="button" onclick="clearData()">Clear Data</button>
    <button type="button" style="margin-left: 20px">
      <a href="/projectPage">Back</a>
    </button>

    <div id="tokenDisplay"></div>
    <div class="display-container">
      <div id="apiMethodsDisplay"></div>
      <div id="exampleDisplay"></div>
    </div>

    <script>
      const projectToken = sessionStorage.getItem("projectData");
      const TokenData = JSON.parse(projectToken);
      function fetchData() {
        document
          .getElementById("typeDropdown")
          .addEventListener("change", function () {
            let collectionDropdown =
              document.getElementById("collectionDropdown");

            if (this.value === "connect") {
              fetch(`/projectCollection?projectKey=${TokenData.token}`)
                .then((response) => response.json())
                .then((data) => {
                  collectionDropdown.innerHTML =
                    '<option value="" selected disabled>Select Collection</option>';
                  data.collections.forEach((collection) => {
                    let option = document.createElement("option");
                    option.value = collection.modelName; // Using modelName as the value
                    option.textContent = collection.modelName; // Display model name
                    collectionDropdown.appendChild(option);
                  });

                  collectionDropdown.style.display = "block"; // Show dropdown
                })
                .catch((error) =>
                  console.error("Error fetching collections:", error)
                );
            } else {
              collectionDropdown.style.display = "none"; // Hide dropdown if another option is selected
            }
          });
      }
      fetchData();
      
      // Function to generate example of API
      function generateExample(model) {
        const example = {};
        const testId = "67cc2c0961bee872e4b5a974";
        for (const [key, type] of Object.entries(model)) {
          if (type === "String") {
            example[key] = "Sample Text"; // Example string
          } else if (type === "Boolean") {
            example[key] = Math.random() > 0.5; // Random true/false
          } else if (type === "Number") {
            example[key] = Math.floor(Math.random() * 100000); // Random number
          } else if (type === "Date") {
            const randomDate = new Date();
            randomDate.setDate(
              randomDate.getDate() - Math.floor(Math.random() * 1000)
            ); // Random past date
            example[key] = randomDate.toISOString().split("T")[0]; // Format as YYYY-MM-DD
          } else if (type === "SingleFile") {
            example[key] = `${key}_${Math.random()
              .toString(36)
              .substring(7)}.png`; // Random file path
          } else if (type === "MultiFile") {
            const fileCount = Math.floor(Math.random() * 5) + 1; // 1 to 5 files
            example[key] = Array.from(
              { length: fileCount },
              (_, i) =>
                `${key}_${i + 1}_${Math.random().toString(36).substring(7)}.png`
            );
          } else if (type.startsWith("connect:")) {
            example[key] = `${testId}`;
          }
        }
        return example;
      }

      // Function to add a new text field, dropdown, and "+" button
      function addFormField() {
        const container = document.createElement("div");
        container.className = "container";

        // Create a text input
        const input = document.createElement("input");
        input.type = "text";
        input.placeholder = "Enter text";
        input.name = "textField";

        // Create a dropdown
        const select = document.createElement("select");
        select.name = "dropdown";
        select.innerHTML = `
                <option value="" selected disabled>SELECT OPTION</option>
                <option value="String">Text</option>
                <option value="Number">Number</option>
                <option value="Boolean">Boolean</option>
                <option value="Date">Date</option>
                <option value="SingleFile">File ( Upload Single File )</option>
                <option value="MultiFile">File ( Upload Multiple File )</option>
                <option value="connect">Connect With other Collection</option>
            `;

        const collectionDropdown = document.createElement("select");
        collectionDropdown.name = "collection";
        collectionDropdown.style.display = "none"; // Initially hidden

        // Fetch and populate collection dropdown dynamically
        select.addEventListener("change", function () {
          if (this.value === "connect") {
            fetch(`/projectCollection?projectKey=${TokenData.token}`)
              .then((response) => response.json())
              .then((data) => {
                collectionDropdown.innerHTML =
                  '<option value="" selected disabled>Select Collection</option>';

                data.collections.forEach((collection) => {
                  let option = document.createElement("option");
                  option.value = collection.modelName; // Set value as modelName
                  option.textContent = collection.modelName; // Display modelName
                  collectionDropdown.appendChild(option);
                });

                collectionDropdown.style.display = "block"; // Show dropdown
              })
              .catch((error) =>
                console.error("Error fetching collections:", error)
              );
          } else {
            collectionDropdown.style.display = "none"; // Hide dropdown if another option is selected
          }
        });

        // Create a "-" button
        const button = document.createElement("button");
        button.type = "button";
        button.textContent = "-";
        button.onclick = function () {
          removeFormField(this);
        };

        // Append all elements to the container
        container.appendChild(input);
        container.appendChild(select);
        container.appendChild(collectionDropdown);
        container.appendChild(button);

        // Append the container to the form
        document.getElementById("formContainer").appendChild(container);
      }

      // Function to remove a specific row (container)
      function removeFormField(button) {
        const container = button.parentElement;
        const formContainer = document.getElementById("formContainer");

        // Check if the container is the first child
        if (container === formContainer.firstElementChild) {
          alert("The first row cannot be removed.");
          return;
        }

        // Remove the container
        container.remove();
      }

      // Function to generate a random key (token)
      function generateRandomKey() {
        const characters =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        let result = "";
        const length = 16; // Length of the random key
        for (let i = 0; i < length; i++) {
          result += characters.charAt(
            Math.floor(Math.random() * characters.length)
          );
        }
        return result;
      }

      // Function to gather form data and submit
      async function submitData() {
        const projectKey = document.getElementById("projectKey").value.trim();
        const modelname = document.getElementById("modelname").value.trim();
        const textFields = document.querySelectorAll('input[name="textField"]');
        const dropdowns = document.querySelectorAll('select[name="dropdown"]');
        const collectionDropdowns = document.querySelectorAll(
          'select[name="collection"]'
        );

        const model = {};
        let allFieldsFilled = true;

        if (
          modelname.includes(" ") ||
          projectKey.includes(" ") ||
          projectKey != TokenData.token
        ) {
          allFieldsFilled = false;
        }

        textFields.forEach((textField, index) => {
          const textValue = textField.value.trim();
          const dropdownValue = dropdowns[index].value;
          //   alert(dropdownValue);
          if (!textValue || !dropdownValue || textValue.includes(" ")) {
            allFieldsFilled = false;
          } else {
            if (dropdownValue === "connect") {
              const collectionValue =
                collectionDropdowns[index]?.value || "Unknown Collection";
              model[textValue] = `connect:${collectionValue}`;
            } else {
              model[textValue] = dropdownValue;
            }
          }
        });

        if (!allFieldsFilled) {
          alert("Please Provide valid data before generating the API key.");
          return;
        }

        const response = await fetch(`/check-collection?projectKey=${projectKey}&modelName=${modelname}`);
        const checkProjectdata = await response.json();

        if (checkProjectdata.exists) {
            alert("This collection already exists in the project.");
            return;
        }

        const example = generateExample(model);

        document.getElementById(
          "tokenDisplay"
        ).textContent = `Authorization : Enter Your Project Key`;

        const apiBaseUrl = `https://generateapi.onrender.com/api/${modelname}`;
        const apiMethods = `
        <h2>API METHODS</h2>
        <ul>
            <li><strong>POST :</strong> ${apiBaseUrl}</li>
            <li><strong>GET :</strong> ${apiBaseUrl}</li>
            <li><strong>DELETE :</strong> ${apiBaseUrl}/:id</li>
            <li><strong>PATCH :</strong> ${apiBaseUrl}/:id</li>
        </ul>
    `;

        const exampleOutput = `
            <h2>OBJECT EXAMPLE</h2>
        <pre>${JSON.stringify(example, null, 4)}</pre>
    `;

        const data = {
          apiMethods,
          exampleOutput,
        };
        sessionStorage.setItem("formData", JSON.stringify(data));

        // Display data on the page
        displayData(data);

        // Send data to the server
        fetch("/submit", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            projectKey: TokenData.token,
            modelName: modelname,
            modelField: model,
          }),
        })
          .then((response) => response.json())
          .then(() => {
            // Clear all dynamic rows except the first default row
            const formContainer = document.getElementById("formContainer");
            // Remove all rows except the first one
            const rows = formContainer.querySelectorAll(".container");
            rows.forEach((row, index) => {
              if (index !== 0) {
                // Keep the first row
                row.remove();
              }
            });

            // Clear text fields and dropdowns in the first row
            document.querySelector('input[name="textField"]').value = "";
            document.querySelector('input[name="modelname"]').value = "";
            document.querySelector('input[name="projectKey"]').value = "";
            document.querySelector('select[name="dropdown"]').value = "";
            document.querySelector('select[name="collection"]').style.display = "none";
          })
          .catch((err) => console.error("Error:", err));
      }

      // Function to display token and example code of API
      function displayData(data) {
        document.getElementById(
          "tokenDisplay"
        ).textContent = `Authorization : Enter Your Project Key`;
        document.getElementById("apiMethodsDisplay").innerHTML =
          data.apiMethods;
        document.getElementById("exampleDisplay").innerHTML =
          data.exampleOutput;

        document.getElementById("apiMethodsDisplay").style.padding = "20px";
        document.getElementById("exampleDisplay").style.padding = "20px";
      }

      // window load data get
      window.onload = function () {
        const storedData = sessionStorage.getItem("formData");
        if (storedData) {
          const data = JSON.parse(storedData);
          displayData(data);
        }
      };

      // Function to clear data from session storage and example code
      function clearData() {
        // Remove data from localStorage
        sessionStorage.removeItem("formData");

        // Clear the displayed data
        document.getElementById("tokenDisplay").textContent = "";
        document.getElementById("apiMethodsDisplay").innerHTML = "";
        document.getElementById("exampleDisplay").innerHTML = "";
        document.getElementById("apiMethodsDisplay").style.padding = "0px";
        document.getElementById("exampleDisplay").style.padding = "0px";

        const formContainer = document.getElementById("formContainer");
        // Remove all rows except the first one
        const rows = formContainer.querySelectorAll(".container");
        rows.forEach((row, index) => {
          if (index !== 0) {
            // Keep the first row
            row.remove();
          }
        });

        document.querySelector('input[name="textField"]').value = "";
        document.querySelector('input[name="modelname"]').value = "";
        document.querySelector('input[name="projectKey"]').value = "";
        document.querySelector('select[name="dropdown"]').value = "";
      }
    </script>
  </body>
</html>
